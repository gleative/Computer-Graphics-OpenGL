#version 400 core

const int MAX_JOINTS = 50;//max joints allowed in a skeleton
const int MAX_WEIGHTS = 3;//max number of joints that can affect a vertex

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in ivec3 jointIndices;
in vec3 weights;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[10];
out vec3 toCameraVector;
out float visibility;

uniform mat4 jointTransforms[MAX_JOINTS];

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.00035;
const float gradient = 5.00;

void main(void){
	
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 totalLocalPos = vec4(0.0);
	vec4 totalNormal = vec4(0.0);
	
	for(int i=0;i<MAX_WEIGHTS;i++){
		mat4 jointTransform = jointTransforms[in_jointIndices[i]];
		vec4 posePosition = jointTransform * vec4(in_position, 1.0);
		totalLocalPos += posePosition * in_weights[i];
		
		vec4 worldNormal = jointTransform * vec4(in_normal, 0.0);
		totalNormal += worldNormal * in_weights[i];
	}
	
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionViewMatrix * viewMatrix * transformationMatrix * totalLocalPos;
	pass_textureCoords = (textureCoords / numberOfRows) + offset;
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;

}