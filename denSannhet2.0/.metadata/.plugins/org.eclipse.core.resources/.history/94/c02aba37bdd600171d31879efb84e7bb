package animation;

import shaders.UniformMat4Array;
import shaders.UniformMatrix;
import shaders.UniformSampler;
import shaders.UniformVec3;
import shaders.shaderProgram;
import toolbox.Maths;

import java.util.List;

import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import engineTester.MyFile;
import entities.Camera;
import entities.Light;

public class AnimatedModelShader extends shaderProgram {
	
	// ADDED
	private int location_transformationMatrix;
	private int location_projectionMatrix;
	private int location_viewMatrix;
	private int location_lightPosition[];
	private int location_lightColor[];
	private int location_attenuation[];
	private int location_shineDamper;
	private int location_reflectivity;
	private int location_useFakeLighting;
	private int location_skyColor;
	private int location_numberOfRows;
	private int location_offset;
	private int location_jointTransforms[]; 
	private int location_clipPlane;

	private static final int MAX_JOINTS = 50;// max number of joints in a skeleton
	private static final int DIFFUSE_TEX_UNIT = 0;

//	private static final MyFile VERTEX_SHADER = new MyFile("animation", "animatedEntityVertex.txt");
//	private static final MyFile FRAGMENT_SHADER = new MyFile("animation", "animatedEntityFragment.txt");
	
	private static final String VERTEX_SHADER = "src/animation/animatedEntityVertex.txt";
	private static final String FRAGMENT_SHADER = "src/animation/animatedEntityFragment.txt";
	
	// ADDED

//	protected UniformMatrix projectionViewMatrix = new UniformMatrix("projectionViewMatrix");
//	protected UniformVec3 lightDirection = new UniformVec3("lightDirection");
//	protected UniformMat4Array jointTransforms = new UniformMat4Array("jointTransforms", MAX_JOINTS);
//	private UniformSampler diffuseMap = new UniformSampler("diffuseMap");

	/**
	 * Creates the shader program for the {@link AnimatedModelRenderer} by
	 * loading up the vertex and fragment shader code files. It also gets the
	 * location of all the specified uniform variables, and also indicates that
	 * the diffuse texture will be sampled from texture unit 0.
	 */
//	public AnimatedModelShader() {
//		super(VERTEX_SHADER, FRAGMENT_SHADER, "in_position", "in_textureCoords", "in_normal", "in_jointIndices",
//				"in_weights");
//		super.storeAllUniformLocations(projectionViewMatrix, diffuseMap, lightDirection, jointTransforms);
//		connectTextureUnits();
//	}
	
	// ADDED
	public AnimatedModelShader() {
		super(VERTEX_SHADER, FRAGMENT_SHADER);
	}
	
	@Override
	protected void getAllUniformLocations() {
		location_transformationMatrix = super.getUniformLocation("transformationMatrix");
		location_projectionMatrix = super.getUniformLocation("projectionMatrix");
		location_viewMatrix = super.getUniformLocation("viewMatrix");
		location_shineDamper = super.getUniformLocation("shineDamper");
		location_reflectivity = super.getUniformLocation("reflectivity");
//		location_useFakeLighting = super.getUniformLocation("useFakeLighting");
		location_skyColor = super.getUniformLocation("skyColour");
		location_numberOfRows = super.getUniformLocation("numberOfRows");
		location_offset = super.getUniformLocation("offset");
		location_clipPlane = super.getUniformLocation("clipPlane");
		
//		location_lightPosition = new int[MAX_LIGHTS];
//		location_lightColor = new int[MAX_LIGHTS];
//		location_attenuation = new int[MAX_LIGHTS];
//		for(int i=0; i < MAX_LIGHTS; i++) {
//			location_lightPosition[i] = super.getUniformLocation("lightPosition["+i+"]");
//			location_lightColor[i] = super.getUniformLocation("lightColor["+i+"]");
//			location_attenuation[i] = super.getUniformLocation("attenuation[" + i + "]");
//		}
		
		location_jointTransforms = new int[MAX_JOINTS];
		for(int i=0; i<MAX_JOINTS; i++) {
			location_jointTransforms[i] = super.getUniformLocation("jointTransforms[" + i + "]");
		}
		
		
	}
	
	public void loadCLipPlane(Vector4f plane) {
//		super.load4DVector(location_clipPlane, plane);
	}
	
	public void loadShineVariables(float damper, float refectivity) {
		super.loadFloat(location_shineDamper, damper);
		super.loadFloat(location_reflectivity, refectivity);
	}
	
	public void loadNumberOfRows(int numberOfRows) {
		super.loadFloat(location_numberOfRows, numberOfRows);
	}
	
	public void loadOffset(float x, float y) {
		super.load2DVector(location_offset, new Vector2f(x, y));
	}
	
	public void loadSkyColor(float red, float green, float blue) {
		super.loadVector(location_skyColor, new Vector3f(red, green, blue));
	}
	
	public void loadFakeLightingVariable(boolean useFakeLighting) {
		super.loadBoolean(location_useFakeLighting, useFakeLighting);
	}
	
	public void loadTransformationMatrix(Matrix4f matrix) {
		super.loadMatrix(location_transformationMatrix, matrix);
	}
	
	public void loadLights(List<Light> lights) {
	}
	
	public void loadJointTransforms(Matrix4f[] transforms) {
		for(int i=0; i < MAX_JOINTS; i++) {
			if(i < transforms.length) {
				super.loadMatrix(location_jointTransforms[i], transforms[i]);
			}else {
				super.loadMatrix(location_jointTransforms[i], new Matrix4f());
			}
		}
	}
	
	public void loadViewMatrix(Camera camera) {
		Matrix4f viewMatrix = Maths.createViewMatrix(camera);
		super.loadMatrix(location_viewMatrix, viewMatrix);
	}
	
	public void loadProjectionMatrix(Matrix4f projection) {
		super.loadMatrix(location_projectionMatrix, projection);
	}

	@Override
	protected void bindAttributes() {
		super.bindAttribute(0, "position");
		super.bindAttribute(1, "textureCoords");
		super.bindAttribute(2, "normal");
		super.bindAttribute(3, "jointIndices");
		super.bindAttribute(4, "weights");
	}

	/**
	 * Indicates which texture unit the diffuse texture should be sampled from.
	 */
//	private void connectTextureUnits() {
//		super.start();
//		diffuseMap.loadTexUnit(DIFFUSE_TEX_UNIT);
//		super.stop();
//	}

}
