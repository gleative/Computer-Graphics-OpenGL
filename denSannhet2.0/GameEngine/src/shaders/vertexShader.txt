#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[10];
out vec3 toCameraVector;

//the value that decides how much this entity is blended with the sky colour aka making it appears having fog on it.
out float visibility;

uniform mat4 transformationMatrix;

// This matrix determines how far the camera can view, how wide and make sure a square that are really big up close
// will appear smaller in the distance.
uniform mat4 projectionMatrix;

uniform mat4 viewMatrix;
uniform vec3 lightPosition[10];

uniform float useFakeLighting;

uniform float numberOfRows;
uniform vec2 offset;

// Determines the density of the Fog on entities in the world
// We could say this determines the thickness of the fog
const float density = 0.000035;

// the larger the number, the harder is the edge in the gradient.
// Determines the area affected of the fog, the higher the value is
// the smaller is the area effected with the gradient, and resulting in 
// making the transition have a "hard" edge instead of fading.
const float gradient = 5.00;

void main(void){
	
	
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	
	// Vector pointing to the current vertices of the entity relative to the Camera. This is to later 
	// calculate the distance between the camera and the entity to calculate how much fog affect the entity.
	vec4 positionRelativeToCam = viewMatrix * worldPosition; 
	
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoords = (textureCoords / numberOfRows) + offset;
	
		vec3 actualNormal = normal;
	
	/* we check if fakeLighting is greater then, 0.5 if so we changes all the normals to
	  xyz(0.0, 1.0, 0.0) leading it to point directly upwards and get even lighting. */
	if(useFakeLighting > 0.5 ){
		// pointing directly up
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	
	
	
	
	for(int i = 0; i < 10; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	toCameraVector = (inverse (viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	// finding the distance of the vector between the entity in the world and the camera
	float distance = length(positionRelativeToCam.xyz);
	
	// calculating the visibility value base on the distance from camera and the specified density and gradient of fog
	visibility = exp(-pow((distance*density),gradient));
	
	// make sure the visibility results will stay within the values of 0.0 to 1.0
	visibility = clamp(visibility,0.0,1.0);
	
	
}