#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[10];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

// Texture to the background of the blenMap, or lack of colour. In our case this is black
uniform sampler2D backgroundTexture;

// Texture of the colour Red, found in the texture blendMap.
uniform sampler2D rTexture;

// Texture of the colour Green, found in the texture blendMap.
uniform sampler2D gTexture;

// Texture of the colour Blue, found in the texture blendMap.
uniform sampler2D bTexture;

// Texture that will decide the patterns and to what extent we are going to blend the textures.
// Contains all mentioned colours above.
uniform sampler2D blendMap;

uniform vec3 lightColour[10];
uniform vec3 attenuation[10];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){
	
	// Finding the colours of the blendMap on current Fragment, also passing the textureCordinates (none tiled). So we know can map
	// the texture 1 to 1 onto the terrain.
	vec4 blendMapColour = texture(blendMap, pass_textureCoords);
	
	// Set the background colour (black) minus the colour found in the blendMap, we determine how much we want to render the
	// backgroundTexture. Because we want to render the background when the colour is black.
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	
	// Tile up the fragment, at the specified texture coordinates
	vec2 tiledCoords = pass_textureCoords * 40; 
	
	// Assign the background colour and multiply it with the amount found earlier.
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;

	// Do the same here for red, green and blue.
	vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
	
	// then we calculate the total colour to the vector. 
	vec4 totalColour =  backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 10; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		vec3 lightDirection = - unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.2);

	out_Color = vec4(totalDiffuse, 1.0) *  totalColour + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
	
}